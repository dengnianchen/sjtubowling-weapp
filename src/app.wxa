<template>
	<view>
		<layout-loading wx:if="{{loading}}"></layout-loading>
		<layout-error wx:if="{{loadingError}}" error="{{loadingError}}" bindclick="reloadPage"></layout-error>
		<page></page>
	</view>
</template>

<script>
	const welib = require('./welib/index');
	const qcloud = require('./vendor/wafer2-client-sdk/index');
	const config = require('./config');
	const util = require('./utils/index');
	const style = require('./style');
	const pageUtils = require('./utils/page');
	
	
	
	// 微信小程序的Promise类不含有finally函数
	// 因此需自行实现该函数并插入Promise类的原型中
	Promise.prototype.finally = function(fn) {
		function finFn() {
			fn.call(null);
		}
		this.then(finFn, finFn);
		return this;
	};
	
	
	
	/**
	 * 定制页面加载过程，在页面加载前检查登陆状态及用户信息完善状态
	 * @param onLoadFunc 页面的原始onLoad函数，包含页面本身的加载逻辑
	 * @param options onLoad函数的参数
	 */
	function pageLoading(onLoadFunc, options) {
		
		// 尝试获取当前登陆用户
		let user = $.Session.get('user');
		
		new Promise((resolve, reject) => {
			// 1. 检查登陆状态并获取绑定的网站用户信息
			if (!this.auth || user) // 当前页面无需登陆或用户信息已经存在（之前已登陆）
				resolve();
			else {
				// 尝试登陆并获取绑定的网站用户信息，若登陆失败或当前微信账号没有绑定网站账号，则跳转到登陆绑定页面
				qcloud.loginWithCode({
					success: res => {
						user = $.Session.get('user');
						if (user) {
							this.setData({ suser: user });
							resolve();
						} else
							reject("bind");
					},
					fail: err => reject("bind")
				});
			}
		}).then(() => new Promise((resolve, reject) => {
			// 2. 检查当前登陆用户的用户信息是否已完善，若未完善则跳转到新用户指导页面
			if (!user) // 当前没有登陆用户，也意味着当前页面无需登陆即可访问
				resolve();
			else if (getApp().globalData.work ||
				this.route === "pages/newGuide/index") // 当前正在用户信息完善的过程中
				resolve();
			else {
				// 检查用户信息是否已完善，若没有则跳转到新用户指导页面
				const completion = user.checkInfoCompletion();
				let checkResult = true;
				for (let c of completion) {
					if (!c) {
						checkResult = false;
						reject("fill_info");
						break;
					}
				}
				if (checkResult)
					resolve();
			}
		})).then(() => {
			// 3. 设置通用数据并调用onLoad函数（若存在）进行页面加载
			this.setData({ suser: user, global: getApp().globalData });
			if (onLoadFunc instanceof Function) { // 当前页面定义了onLoad函数，则继续执行其加载过程
				const promise = onLoadFunc.call(this, options);
				// 若当前页面的onLoad函数返回的不是Promise对象，则加载已经完成，
				// 否则需等待该Promise执行完成后才能认为加载完成
				if (promise && promise.constructor === Promise)
					return promise;
			}
		}).then(() => this.setLoading(false)).catch((ex) => {
			if (ex === "bind") // 登陆检查失败，跳转到登陆绑定页面
				wx.redirectTo({
					url: `../bind/index?from=${encodeURIComponent(this.getPath())}`,
				});
			else if (ex === "fill_info") // 用户信息尚未完善，跳转到新用户指导页面
				wx.redirectTo({
					url: `../newGuide/index?from=${encodeURIComponent(this.getPath())}`,
				});
			else // 页面加载失败，显示错误界面
				this.setLoading(false, ex);
		});
		
	}
	
	
	
	// 包装微信小程序默认的Page函数，可以在小程序对页面初始化前进行一些额外操作
	const originPageFunction = Page;
	Page = function(page) {
		
		// 添加页面数据loading=true，用于显示“加载中”提示画面
		$(page.data).extend({ loading: true });
		// 插入工具函数
		$(page).extend(pageUtils);
		
		// 包装onLoad函数，进行加载时的通用操作
		const pageOnLoad = page.onLoad;
		page.onLoad = function(options) {
			this.setLoading(true);
			Promise.resolve().then(() => {
				if (!util.getConfig()) { // 若当前不存在全局配置信息，则先加载之
					// 全局配置信息存在app对象中，因此仅在小程序运行后的第一个页面加载时需要从服务器获取
					return util.request("/common/config").
						then(config => getApp().globalData.config = config);
				}
			}).then (() => {
				pageLoading.call(this, pageOnLoad, options)
			}).catch(ex => {
				this.setLoading(false, ex)
			});
		};
		
		// 调用小程序默认的Page函数进行页面初始化
		originPageFunction(page);
		
	};

	
	
	export default {
		config: {
			usingComponents: {
				'layout-loading': 'layout/loading',
				'layout-error': 'layout/error',
			},
			pages: [],
			window: {
				backgroundTextStyle: 'dark',
				backgroundColor: '#efefef',
				navigationBarBackgroundColor: '#ffffff',
				navigationBarTitleText: '交大保龄 - 员工之家',
				navigationBarTextStyle: 'black',
			},
			networkTimeout: {
				request: 10000,
			},
			tabBar: {
				color: '#999999',
				selectedColor: '#00B26A',
				list: [
					{
						pagePath: 'pages/home/index',
						text: '首页',
						iconPath: '/images/home.png',
						selectedIconPath: '/images/home-active.png'
					}, {
						pagePath: 'pages/family/index',
						text: '全家福',
						iconPath: '/images/family.png',
						selectedIconPath: '/images/family-active.png'
					}, {
						pagePath: 'pages/my/index',
						text: '个人中心',
						iconPath: '/images/user.png',
						selectedIconPath: '/images/user-active.png'
					}],
			},
		},
		globalData: {
			config: null
		},
		onLaunch() {
			welib.init();
			qcloud.clearSession();
			qcloud.setLoginUrl(config.service.loginUrl);
			this.globalData.style = style;
		},
		onShow() {
		},
		onHide() {
		},
	};
</script>

<style lang="less">
	@import "style";
	@import "common/style/app-panel.wxss";
	@import 'vendor/font-awsome/fa.wxss';
	@import 'common/style/fake-button.wxss';
	
	page {
		background-color: @backgroundColor;
		height: 100%;
		font-size: @fontSize__text;
		line-height: 1.5;
		font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;
	}
	.page__hd {
		padding: 80px;
	}
	.page__bd {
		padding-bottom: 80px;
	}
	.page__bd_spacing {
		padding-left: 30px;
		padding-right: 30px;
	}
	
	.page__ft{
		padding-bottom: 20px;
		text-align: center;
	}
	
	.page__title {
		text-align: left;
		font-size: @fontSize__title;
		font-weight: 400;
		color: @mainHeadingColor;
	}
	
	.page__desc {
		margin-top: 10px;
		font-size: @fontSize__desc;
		color: @subHeadingColor;
		text-align: left;
	}
	
	.large-btn-wrapper {
		padding: 0 30px 0 30px;
		margin: 30px 0;
	}
	
</style>
